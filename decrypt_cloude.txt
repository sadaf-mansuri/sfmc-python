%%[
/* AMPScript Implementation */
SET @encryptedValue = AttributeValue("EncryptedField") /* e.g. "rMVOk81vL5iFse+MwnNF8n67H1W1KehqM4qGYOTZejA=" */
SET @key = "YOUR_ENCRYPTION_KEY_HERE"

/* Extract first 16 bytes for IV */
SET @iv = Base64Decode(Substring(@encryptedValue, 1, 24)) /* First 16 bytes in Base64 is roughly 24 characters */
SET @actualData = Substring(@encryptedValue, 25)

/* Decrypt using IV and Key */
SET @decryptedValue = DecryptSymmetric(
    @actualData,
    "aes",
    @key,
    "CBC",
    @iv,
    "base64"
)
]%%

Decrypted Value: %%=v(@decryptedValue)=%%

/* Server-Side JavaScript Implementation */
<script runat="server">
Platform.Load("core", "1.1.1");

function decryptData(encryptedBase64, key) {
    try {
        // Convert key to bytes if it's in string format
        var keyBytes = Platform.Function.Base64Decode(key);
        
        // Extract IV (first 16 bytes)
        var encryptedBytes = Platform.Function.Base64Decode(encryptedBase64);
        var iv = encryptedBytes.slice(0, 16);
        var actualData = encryptedBytes.slice(16);
        
        // Create decipher
        var decipher = Crypto.createDecipher("aes-256-cbc", keyBytes, iv);
        
        // Decrypt
        var decrypted = decipher.update(actualData);
        decrypted = decrypted.concat(decipher.final());
        
        // Convert to string
        return Platform.Function.BinaryToString(decrypted);
    } catch(e) {
        Write("Decryption Error: " + e.message);
        return null;
    }
}

// Example usage
var row = Platform.Function.LookupRows(
    "YourDataExtensionName",
    "PrimaryKey",
    "SomeValue"
);

if(row && row.length > 0) {
    var encryptedValue = row[0]["EncryptedColumn"]; // Value like "rMVOk81vL5iFse+MwnNF8n67H1W1KehqM4qGYOTZejA="
    var key = "YOUR_BASE64_ENCRYPTION_KEY";
    
    var decryptedValue = decryptData(encryptedValue, key);
    Write("Decrypted Value: " + decryptedValue);
}
</script>